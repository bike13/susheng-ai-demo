pipeline {
    agent any

    parameters {
        string(name: 'git_branch', defaultValue: 'main', description: 'Git branch to build')
    }

    environment {
        DOCKER_IMAGE = 'susheng-ai-demo:pro'
        DOCKER_CONTAINER = 'susheng-ai-app'
        MYSQL_HOST = 'sql.freedb.tech'
        MYSQL_PORT = '3306'
        WORKSPACE_DIR = "${WORKSPACE}"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Building from branch: ${params.git_branch}"
                    
                    // 尝试多种方式检出代码
                    sh '''
                        echo "=== 尝试检出代码 ==="
                        
                        // 方法1: 使用checkout scm但指定分支
                        echo "方法1: 使用checkout scm"
                        checkout scm || echo "checkout scm 失败"
                        
                        // 检查是否成功
                        if [ -f "Dockerfile" ]; then
                            echo "✅ 方法1成功 - 找到Dockerfile"
                            echo "当前分支: $(git branch --show-current 2>/dev/null || echo '无法获取分支')"
                        else
                            echo "❌ 方法1失败 - 未找到Dockerfile"
                            
                            // 方法2: 手动git操作
                            echo "方法2: 手动git操作"
                            git fetch origin || echo "git fetch 失败"
                            git checkout ${params.git_branch} || git checkout main || echo "分支切换失败"
                            git pull origin ${params.git_branch} || git pull origin main || echo "git pull 失败"
                        fi
                        
                        echo "=== 最终验证 ==="
                        echo "当前目录: $(pwd)"
                        echo "文件列表:"
                        ls -la
                        echo "Dockerfile检查:"
                        test -f Dockerfile && echo "✅ Dockerfile存在" || echo "❌ Dockerfile不存在"
                    '''
                }
            }
        }
        
        stage('Diagnose') {
            steps {
                script {
                    echo "=== 诊断信息 ==="
                    sh 'echo "当前工作目录: $(pwd)"'
                    sh 'echo "Jenkins工作空间: $WORKSPACE"'
                    sh 'echo "环境变量WORKSPACE_DIR: $WORKSPACE_DIR"'
                    sh 'echo "当前Git分支: $(git branch --show-current 2>/dev/null || echo "无法获取分支信息")"'
                    sh 'echo "Git远程分支列表:"'
                    sh 'git branch -r 2>/dev/null || echo "无法获取远程分支"'
                    sh 'ls -la'
                    sh 'echo "查找Dockerfile:"'
                    sh 'find . -name "Dockerfile" -type f -exec echo "找到: {}" \\;'
                    sh 'test -f Dockerfile && echo "✅ Dockerfile存在" || echo "❌ Dockerfile不存在"'
                    sh 'echo "Dockerfile内容预览:"'
                    sh 'head -5 Dockerfile 2>/dev/null || echo "无法读取Dockerfile"'
                }
            }
        }
        
        stage('Build & Deploy') {
            steps {
                script {
                    // 停止并删除旧容器
                    sh 'docker stop $DOCKER_CONTAINER 2>/dev/null || true'
                    sh 'docker rm $DOCKER_CONTAINER 2>/dev/null || true'
                    
                    // 构建新镜像
                    sh 'docker build --no-cache -t $DOCKER_IMAGE .'
                    
                    // 启动新容器
                    sh 'docker run -d --name $DOCKER_CONTAINER -p 8080:8000 -e MYSQL_HOST=$MYSQL_HOST -e MYSQL_PORT=$MYSQL_PORT $DOCKER_IMAGE'
                }
            }
        }
    }

    post {
        success {
            echo '✅ 部署成功!'
            echo '🌐 应用地址: http://localhost:8080'
            echo '📚 API文档: http://localhost:8080/docs'
        }
        failure {
            echo '❌ 部署失败，请检查日志'
        }
    }
}
